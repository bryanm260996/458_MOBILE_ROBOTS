import roslibpy
import time
import threading

# Configuration
IP = '192.168.8.104'
PORT = 9012
ROBOT_NAME = 'india'

# Initialize ROS connection
ros = roslibpy.Ros(host=IP, port=PORT)
ros.run()

class Odom:
    def __init__(self):
        self.latest_odom = None
        self.odometry_reset_done = False

        # Initialize movement publisher
        self.movement_topic = roslibpy.Topic(ros, f'/{ROBOT_NAME}/cmd_vel', 'geometry_msgs/Twist')

        # Initialize odom sensor subscriber
        self.odom_topic = roslibpy.Topic(ros, f'/{ROBOT_NAME}/odom', 'nav_msgs/Odometry')

        # Service to reset odometry position and orientation
        self.reset_odom_service = roslibpy.Service(ros, f'/{ROBOT_NAME}/reset_pose', 'irobot_create_msgs/ResetPose')

        # Initialize threads
        self.thread_targets = [
            lambda: self.move_forward(1),  # Pass distance as an argument
            self.right_turn,
            self.left_turn,
            self.stop_robot
        ]
        self.threads = [threading.Thread(target=t, daemon=True) for t in self.thread_targets]

    # Function to create movement commands
    def create_movement_command(self, linear_speed=0.1, angular_speed=0.0):
        return {
            'linear': {'x': linear_speed, 'y': 0.0, 'z': 0.0},
            'angular': {'x': 0.0, 'y': 0.0, 'z': angular_speed}
        }

    # Movement functions
    def move_forward(self, dist):
        speed = 0.1  # meters per second
        movement_command = self.create_movement_command(linear_speed=speed)
        self.movement_topic.publish(roslibpy.Message(movement_command))

        move_time = dist / speed  # time to move the specified distance
        print(f"Moving forward for {move_time} seconds.")
        time.sleep(move_time)

    def right_turn(self):
        movement_command = self.create_movement_command(linear_speed=0.0, angular_speed=-1.57)  # 90 degrees (pi/2 radians)
        self.movement_topic.publish(roslibpy.Message(movement_command))
        time.sleep(2)  # Adjust duration to suit robot's turning speed

    def left_turn(self):
        movement_command = self.create_movement_command(linear_speed=0.0, angular_speed=1.57)  # 90 degrees
        self.movement_topic.publish(roslibpy.Message(movement_command))
        time.sleep(2)  # Adjust duration to suit robot's turning speed

    def stop_robot(self):
        movement_command = self.create_movement_command(linear_speed=0.0, angular_speed=0.0)
        self.movement_topic.publish(roslibpy.Message(movement_command))

    # Odometry sensor callback
    def callback_odom(self, message):
        self.latest_odom = {
            "position": message['pose']['pose']['position'],
            "orientation": message['pose']['pose']['orientation'],
            "linear_velocity": message['twist']['twist']['linear'],
            "angular_velocity": message['twist']['twist']['angular']
        }

        print(f"Current Position: x = {self.latest_odom['position']['x']}, y = {self.latest_odom['position']['y']}")

        # Only reset odometry once
        if self.latest_odom["position"]["x"] > 1 and not self.odometry_reset_done:
            print('Turning around and resetting odometry...')
            self.right_turn()
            self.move_forward(1)
            self.right_turn()
            result = self.reset_odom_service.call(roslibpy.ServiceRequest())
            if result.success:
                print("Odometry reset successfully.")
                self.odometry_reset_done = True  # Prevent resetting odometry multiple times
            else:
                print("Failed to reset odometry.")

    # Start threads
    def start_threads(self):
        for thread in self.threads:
            thread.start()

        # Join threads to keep main thread running
        for thread in self.threads:
            thread.join()

    def run_loop(self):
        self.odom_topic.subscribe(self.callback_odom)  # Subscribe to odom updates
        self.start_threads()

if __name__ == '__main__':
    robot = Odom()
    try:
        robot.run_loop()
        while True:
            if robot.latest_odom:
                x_position = robot.latest_odom["position"]["x"]
                print(f"Current X position: {x_position}")
                y_position = robot.latest_odom["position"]["y"]
                print(f"Current Y position: {y_position}")
    except KeyboardInterrupt:
        print('Shutting down robot control...')
        ros.terminate()
